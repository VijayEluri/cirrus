
  

{eval /* Base file */ }
Fruit & Veg
{prototype ignored-if-not-first-tag}

main text hello ${name}
{ put some other suff in brackets }
{function showfruit}
fruits available:
  {for each (var f in fruit)}  
fruit: ${f}{if (f === bestfruit)} - this is "the best"!{/if}
  {forelse}
      no fruit
  {/for}  

{if (likefruit)}i like fruit{else}i don't like fruit{/if}
{/function showfruit}

{function showveg}

vegetables available:
  { for each (var v in veg) }
vegetable: ${v}
  {forelse}
      no vegetables
  {/for}

yummy vegetables that my kids like to eat:
  {for (var v in yummyveg)}
vegetable: ${v}
  {   forelse}
      no yummy veg
  {/for   }
    
{/function showveg}
-----
JST.templates["Test1"] = JST.templates["Test1"] || {}; 


JST.templates["Test1"].render = function (out, cx) { with (cx) { /* Base file */; 
out.write("Fruit & Veg\r\n\
{prototype ignored-if-not-first-tag}\r\n\
\r\n\
main text hello "); h(name, out); out.write("\r\n\
{ put some other suff in brackets }\r\n\
"); if (!JST.templates["Test1"].hasOwnProperty("showfruit")) { JST.templates["Test1"].showfruit = function (out, cx) { with (cx) { 
out.write("fruits available:\r\n\
"); var forcounter = 0; for each (var f in fruit) { forcounter++; 
out.write("fruit: "); h(f, out); if (f === bestfruit) {out.write(" - this is \"the best\"!"); } out.write("\r\n\
"); } if (forcounter === 0) { 
out.write("      no fruit\r\n\
"); } 
out.write("\r\n\
"); if (likefruit) {out.write("i like fruit"); } else  {out.write("i don't like fruit"); } out.write("\r\n\
"); } }; }; this.showfruit(out, cx); 
out.write("\r\n\
"); if (!JST.templates["Test1"].hasOwnProperty("showveg")) { JST.templates["Test1"].showveg = function (out, cx) { with (cx) { 
out.write("\r\n\
vegetables available:\r\n\
"); var forcounter = 0; for each (var v in veg) { forcounter++; 
out.write("vegetable: "); h(v, out); out.write("\r\n\
"); } if (forcounter === 0) { 
out.write("      no vegetables\r\n\
"); } 
out.write("\r\n\
yummy vegetables that my kids like to eat:\r\n\
"); var forcounter = 0; for (var v in yummyveg) { forcounter++; 
out.write("vegetable: "); h(v, out); out.write("\r\n\
"); } if (forcounter === 0) { 
out.write("      no yummy veg\r\n\
"); } 
out.write("    \r\n\
"); } }; }; this.showveg(out, cx); } };
-----
{
    name: "food1",
    fruit: ["apples", "oranges", "banana"],
    likefruit: true,
    bestfruit: "banana",
    veg: ["potato", "pumpkin", "<bad> & \"quote's"],
    yummyveg: []
}
-----
Fruit & Veg
{prototype ignored-if-not-first-tag}

main text hello food1
{ put some other suff in brackets }
fruits available:
fruit: apples
fruit: oranges
fruit: banana - this is "the best"!

i like fruit


vegetables available:
vegetable: potato
vegetable: pumpkin
vegetable: &lt;bad&gt; &amp; &quote;quote&apos;s

yummy vegetables that my kids like to eat:
      no yummy veg
    

=====

{prototype Test1}

this gets ignored

{function showveg}
{eval}
var x = 0;
var hello = "hello";
for (var i = 0; i < 5; i++) { x++; }
{/eval}
x should be 5: ${x}
big hello: ${hello.toUpperCase()}
{text}
some text with tags like {for}, {/if}, etc
{/text}
{texttext}
text with {text} tag
{/texttext}
{/function showveg}
-----
JST.templates["Test1"] = JST.templates["Test1"] || {}; JST.templates["Test2"] = Object.create(JST.templates["Test1"]); 




JST.templates["Test2"].showveg = function (out, cx) { with (cx) { 

var x = 0;
var hello = "hello";
for (var i = 0; i < 5; i++) x++;
; 
out.write("x should be 5: "); h(x, out); out.write("\r\n\
big hello: "); h(hello.toUpperCase(), out); out.write("\r\n\
"); 
out.write("some text with tags like {for}, {/if}, etc\r\n\
"); ; 

out.write("text with {text} tag\r\n\
"); ; 
} };
-----
{
    name: "food2",
    fruit: ["apples", "oranges"],
    likefruit: false,
    bestfruit: "none",
}
-----
Fruit & Veg
{prototype ignored-if-not-first-tag}

main text hello food2
{ put some other suff in brackets }
fruits available:
fruit: apples
fruit: oranges

i don't like fruit

x should be 5: 5
big hello: HELLO
some text with tags like {for}, {/if}, etc
text with {text} tag

=====
line 1
line 2 {* comment is ignored *}
{* comment - whole {* line is * } ignored *}
line 3
-----
JST.templates["Test3"] = JST.templates["Test3"] || {}; JST.templates["Test3"].render = function (out, cx) { with (cx) { out.write("line 1\r\n\
line 2 \r\n\
"); 
out.write("line 3"); } };
-----
{}
-----
line 1
line 2 
line 3
=====
top
{render Test3}

bottom {* only single
line comments {supported *}
-----
JST.templates["Test4"] = JST.templates["Test4"] || {}; JST.templates["Test4"].render = function (out, cx) { with (cx) { out.write("top\r\n\
"); JST.templates["Test3"].render(out, cx); 
out.write("\r\n\
bottom {* only single\r\n\
line comments {supported *}"); } };
-----
{}
-----
top
line 1
line 2 
line 3
bottom {* only single
line comments {supported *}